// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email,
    type,
    account_no,
    balance,
    currency
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8
) RETURNING username, hashed_password, full_name, type, email, account_no, balance, currency, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string   `json:"username"`
	HashedPassword string   `json:"hashed_password"`
	FullName       string   `json:"full_name"`
	Email          string   `json:"email"`
	Type           UserType `json:"type"`
	AccountNo      string   `json:"account_no"`
	Balance        int64    `json:"balance"`
	Currency       Currency `json:"currency"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Type,
		arg.AccountNo,
		arg.Balance,
		arg.Currency,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Type,
		&i.Email,
		&i.AccountNo,
		&i.Balance,
		&i.Currency,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, type, email, account_no, balance, currency, password_changed_at, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Type,
		&i.Email,
		&i.AccountNo,
		&i.Balance,
		&i.Currency,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByAccNo = `-- name: GetUserByAccNo :one
SELECT username, hashed_password, full_name, type, email, account_no, balance, currency, password_changed_at, created_at FROM users
WHERE account_no = $1
`

func (q *Queries) GetUserByAccNo(ctx context.Context, accountNo string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccNo, accountNo)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Type,
		&i.Email,
		&i.AccountNo,
		&i.Balance,
		&i.Currency,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    full_name = COALESCE($3, full_name),
    email = COALESCE($4, email)
WHERE
    username = $5
RETURNING username, hashed_password, full_name, type, email, account_no, balance, currency, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	FullName          sql.NullString `json:"full_name"`
	Email             sql.NullString `json:"email"`
	Username          string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Type,
		&i.Email,
		&i.AccountNo,
		&i.Balance,
		&i.Currency,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
