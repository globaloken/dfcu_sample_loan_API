// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: log.sql

package db

import (
	"context"
	"database/sql"
)

const createLog = `-- name: CreateLog :exec
INSERT INTO logs (
    username,
    type
) VALUES (
    $1,$2
)
`

type CreateLogParams struct {
	Username sql.NullString `json:"username"`
	Type     LogType        `json:"type"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) error {
	_, err := q.db.ExecContext(ctx, createLog, arg.Username, arg.Type)
	return err
}

const getLogStats = `-- name: GetLogStats :many
SELECT COUNT(*), type FROM logs GROUP BY type
`

type GetLogStatsRow struct {
	Count int64   `json:"count"`
	Type  LogType `json:"type"`
}

func (q *Queries) GetLogStats(ctx context.Context) ([]GetLogStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLogStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLogStatsRow{}
	for rows.Next() {
		var i GetLogStatsRow
		if err := rows.Scan(&i.Count, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogs = `-- name: GetLogs :many
SELECT id, username, type, created_at FROM logs
`

func (q *Queries) GetLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
